name: Run Symfony Tests with SQLite

on: [push, pull_request]

jobs:
  test:
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.4'
          extensions: sqlite3, pdo_sqlite, zip, mbstring

      - name: Ensure var directory exists
        run: |
          echo "üîÑ Cr√©ation et permissions du dossier var/"
          mkdir -p var
          chmod -R 777 var

      - name: Configure DATABASE_URL for SQLite
        run: echo "DATABASE_URL=sqlite:///%kernel.project_dir%/var/test.db" >> $GITHUB_ENV

      - name: Create SQLite database file
        run: |
          echo "üîÑ Suppression et recr√©ation du fichier SQLite..."
          rm -f var/test.db
          touch var/test.db
          chmod 777 var/test.db
          ls -lah var

      - name: Clear cache and remove vendor
        run: rm -rf vendor/ composer.lock

      - name: Clear Composer Cache
        run: composer clear-cache

      - name: Disable Composer public key check
        run: composer config --global secure-http false


      - name: Install dependencies
        run: composer install --no-interaction --prefer-dist --dev

      - name: Optimize Composer Autoload
        run: composer dump-autoload --optimize --classmap-authoritative

      - name: Debug Composer and PHPUnit Installation
        run: |
          composer diagnose
          ls -lah vendor/phpunit/phpunit/

      - name: Configure JWT keys
        run: |
          mkdir -p config/jwt
          echo "${{ secrets.JWT_PRIVATE_KEY }}" > config/jwt/private.pem
          echo "${{ secrets.JWT_PUBLIC_KEY }}" > config/jwt/public.pem
          chmod 600 config/jwt/private.pem
          chmod 644 config/jwt/public.pem

      - name: Debug JWT keys
        run: ls -lah config/jwt

      - name: Run migrations
        run: php bin/console doctrine:migrations:migrate --no-interaction --env=test || echo "No migrations needed"

      - name: Force schema update
        run: php bin/console doctrine:schema:update --force --env=test

      - name: Ensure Required Roles and Villes Exist
        run: |
          echo "üîß Ajout des r√¥les et villes..."
          sqlite3 var/test.db "INSERT INTO role (id_role, nom_role) VALUES (1, 'admin') ON CONFLICT(id_role) DO NOTHING;"
          sqlite3 var/test.db "INSERT INTO role (id_role, nom_role) VALUES (2, 'utilisateur') ON CONFLICT(id_role) DO NOTHING;"
          sqlite3 var/test.db "INSERT INTO ville (id_ville, code_postale, nom_commune) VALUES (1, '75001', 'Paris') ON CONFLICT(id_ville) DO NOTHING;"
          echo "‚úÖ R√¥les et villes v√©rifi√©s et ajout√©s"

      - name: Debug Database Content
        run: |
          echo "üîç V√©rification des donn√©es en base"
          ls -lah var/
          sqlite3 var/test.db "SELECT * FROM role;"
          sqlite3 var/test.db "SELECT * FROM ville;"
          sqlite3 var/test.db "SELECT * FROM utilisateur;"

      - name: Start Symfony Server
        run: |
          echo "üöÄ D√©marrage du serveur PHP int√©gr√©..."
          php -S 127.0.0.1:8000 -t public > symfony.log 2>&1 &

      - name: Wait for Server to Start
        run: |
          echo "üïí Attente de la disponibilit√© du serveur..."
          for i in {1..45}; do
            curl -s http://127.0.0.1:8000/api/healthcheck && break
            echo "‚è≥ Serveur non pr√™t, attente..."
            sleep 2
          done
          echo "‚úÖ Serveur Symfony pr√™t."

      - name: Ensure Admin User Exists
        run: |
          echo "üîç V√©rification et cr√©ation de l'admin jean.dupont@example.com"
          TABLE_EXISTS=$(sqlite3 var/test.db "SELECT name FROM sqlite_master WHERE type='table' AND name='utilisateur';")
          if [ -z "$TABLE_EXISTS" ]; then
            echo "‚ùå Table utilisateur introuvable ! Base vide ?"
            exit 1
          fi

          EXISTS=$(sqlite3 var/test.db "SELECT COUNT(*) FROM utilisateur WHERE email='jean.dupont@example.com';")
          if [ "$EXISTS" -eq "0" ]; then
            echo "üîπ L'admin n'existe pas, cr√©ation..."
            curl -s -X POST http://127.0.0.1:8000/api/utilisateur -H "Content-Type: application/json" -d '{
              "nom": "Dupont",
              "prenom": "Jean",
              "email": "jean.dupont@example.com",
              "motDePasse": "password123",
              "idRole": 1,
              "idVille": 1
            }'
            sleep 10
          fi
          echo "‚úÖ Admin v√©rifi√©/cr√©√© avec succ√®s."

      - name: R√©cup√©rer le Token JWT de jean.dupont@example.com
        run: |
          echo "üîë R√©cup√©ration du Token JWT pour jean.dupont@example.com"
          for i in {1..3}; do
            RESPONSE=$(curl -s -X POST http://127.0.0.1:8000/api/login_check -H "Content-Type: application/json" -d '{"email": "jean.dupont@example.com", "password": "password123"}')
            echo "R√©ponse JWT : $RESPONSE"

            if [[ "$RESPONSE" != *"Invalid credentials"* && "$RESPONSE" != *"500 Internal Server Error"* ]]; then
              TOKEN=$(echo $RESPONSE | jq -r '.token')
              if [ "$TOKEN" != "null" ] && [ -n "$TOKEN" ]; then
                echo "TOKEN_JWT=$TOKEN" >> $GITHUB_ENV
                echo "‚úÖ Token r√©cup√©r√© avec succ√®s"
                exit 0
              fi
            fi

            echo "üîÅ Tentative $i/3 √©chou√©e, attente..."
            sleep 5
          done
          echo "‚ùå Erreur : Impossible de r√©cup√©rer le Token JWT apr√®s 3 essais."
          exit 1

      - name: Run PHPUnit tests
        run: vendor/bin/phpunit --coverage-text
